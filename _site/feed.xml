<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-27T18:43:50-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Spring Boot and Quartz Integration</title><subtitle>This blog is a setp by step instruction on how to integrate quartz with springboot </subtitle><entry><title type="html">How to Prevent Quartz Jobs from Being Deleted on Application Startup</title><link href="http://localhost:4000/springboot/quartz/2024/08/27/prevent-quartz-job-deletion.html" rel="alternate" type="text/html" title="How to Prevent Quartz Jobs from Being Deleted on Application Startup" /><published>2024-08-27T17:29:00-04:00</published><updated>2024-08-27T17:29:00-04:00</updated><id>http://localhost:4000/springboot/quartz/2024/08/27/prevent-quartz-job-deletion</id><content type="html" xml:base="http://localhost:4000/springboot/quartz/2024/08/27/prevent-quartz-job-deletion.html"><![CDATA[<p>When working with Quartz in a Spring Boot application, it’s common to want to persist jobs across application restarts. By default, Quartz can overwrite existing jobs on startup, but you can configure it to retain jobs and avoid deletion.</p>

<h3 id="preventing-job-deletion-on-startup">Preventing Job Deletion on Startup</h3>

<p>To ensure Quartz jobs aren’t deleted or overwritten when the application restarts, follow these steps:</p>

<h4 id="1-set-overwriteexistingjobs-to-false">1. Set <code class="language-plaintext highlighter-rouge">overwriteExistingJobs</code> to <code class="language-plaintext highlighter-rouge">false</code></h4>

<p>In your <code class="language-plaintext highlighter-rouge">schedulerFactoryBean</code> configuration, ensure that <code class="language-plaintext highlighter-rouge">overwriteExistingJobs</code> is set to <code class="language-plaintext highlighter-rouge">false</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SchedulerFactoryBean</span> <span class="nf">schedulerFactoryBean</span><span class="o">(</span><span class="nc">JobFactory</span> <span class="n">jobFactory</span><span class="o">,</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">SchedulerFactoryBean</span> <span class="n">schedulerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SchedulerFactoryBean</span><span class="o">();</span>
    <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setJobFactory</span><span class="o">(</span><span class="n">jobFactory</span><span class="o">);</span>
    <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>

    <span class="c1">// Disable overwriting of existing jobs</span>
    <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setOverwriteExistingJobs</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
    
    <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setAutoStartup</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">schedulerFactory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="springboot" /><category term="quartz" /><summary type="html"><![CDATA[When working with Quartz in a Spring Boot application, it’s common to want to persist jobs across application restarts. By default, Quartz can overwrite existing jobs on startup, but you can configure it to retain jobs and avoid deletion.]]></summary></entry><entry><title type="html">How to Integrate Quartz with Spring Boot</title><link href="http://localhost:4000/springboot/quartz/2024/08/27/quartz-springboot-integration.html" rel="alternate" type="text/html" title="How to Integrate Quartz with Spring Boot" /><published>2024-08-27T16:09:13-04:00</published><updated>2024-08-27T16:09:13-04:00</updated><id>http://localhost:4000/springboot/quartz/2024/08/27/quartz-springboot-integration</id><content type="html" xml:base="http://localhost:4000/springboot/quartz/2024/08/27/quartz-springboot-integration.html"><![CDATA[<p>Quartz is a richly featured, open-source job scheduling library that can be integrated within virtually any Java application. Its flexibility, along with its ability to handle complex schedules and persistent job states, makes it ideal for enterprise-level scheduling needs.</p>

<h3 id="setting-up-quartz-in-spring-boot">Setting Up Quartz in Spring Boot</h3>

<h4 id="1-gradle-dependencies">1. Gradle Dependencies</h4>

<p>Start by adding the necessary dependencies to your <code class="language-plaintext highlighter-rouge">build.gradle</code>:</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-quartz'</span>
    <span class="n">implementation</span> <span class="s1">'com.zaxxer:HikariCP:4.0.3'</span>
</code></pre></div></div>

<h4 id="2-configuring-quartz-scheduler">2. Configuring Quartz Scheduler</h4>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SchedulerFactoryBean</span> <span class="nf">schedulerFactoryBean</span><span class="o">(</span><span class="n">JobFactory</span> <span class="n">jobFactory</span><span class="o">,</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SchedulerFactoryBean</span> <span class="n">schedulerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SchedulerFactoryBean</span><span class="o">();</span>
        <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setJobFactory</span><span class="o">(</span><span class="n">jobFactory</span><span class="o">);</span>
        <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setOverwriteExistingJobs</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">schedulerFactory</span><span class="o">.</span><span class="na">setAutoStartup</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">schedulerFactory</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">JobDetailFactoryBean</span> <span class="nf">jobDetail</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">JobDetailFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JobDetailFactoryBean</span><span class="o">();</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setJobClass</span><span class="o">(</span><span class="n">SampleJob</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="s2">"Sample Quartz Job"</span><span class="o">);</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDurability</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SimpleTriggerFactoryBean</span> <span class="nf">trigger</span><span class="o">(</span><span class="n">JobDetail</span> <span class="n">jobDetail</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SimpleTriggerFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleTriggerFactoryBean</span><span class="o">();</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setJobDetail</span><span class="o">(</span><span class="n">jobDetail</span><span class="o">);</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setRepeatInterval</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>  <span class="c1">// Run every 5 seconds</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setRepeatCount</span><span class="o">(</span><span class="n">SimpleTrigger</span><span class="o">.</span><span class="na">REPEAT_INDEFINITELY</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AutowiringSpringBeanJobFactory</span> <span class="kd">extends</span> <span class="n">SpringBeanJobFactory</span> <span class="o">{</span>
        <span class="nd">@Autowired</span>
        <span class="kd">private</span> <span class="n">AutowireCapableBeanFactory</span> <span class="n">beanFactory</span><span class="o">;</span>

        <span class="nd">@Override</span>
        <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">createJobInstance</span><span class="o">(</span><span class="n">TriggerFiredBundle</span> <span class="n">bundle</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
            <span class="n">Object</span> <span class="n">job</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">createJobInstance</span><span class="o">(</span><span class="n">bundle</span><span class="o">);</span>
            <span class="n">beanFactory</span><span class="o">.</span><span class="na">autowireBean</span><span class="o">(</span><span class="n">job</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">job</span><span class="o">;</span>
        <span class="o">}</span>
</code></pre></div></div>

<h4 id="3-defining-a-datasource">3. Defining a DataSource</h4>

<p>Defining the datasoruce shows where the schedulded job can be stored.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">quartzDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="n">driverClassName</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setMaximumPoolSize</span><span class="o">(</span><span class="n">maximumPoolSize</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="4-creating-a-sample-quartz-job">4. Creating a Sample Quartz Job</h4>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nd">@Component</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleJob</span> <span class="kd">implements</span> <span class="n">Job</span> <span class="o">{</span>
    
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">(</span><span class="n">JobExecutionContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JobExecutionException</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s2">"Sample Job is executing..."</span><span class="o">);</span>
            <span class="c1">// Your business logic here</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="springboot" /><category term="quartz" /><summary type="html"><![CDATA[Quartz is a richly featured, open-source job scheduling library that can be integrated within virtually any Java application. Its flexibility, along with its ability to handle complex schedules and persistent job states, makes it ideal for enterprise-level scheduling needs.]]></summary></entry></feed>